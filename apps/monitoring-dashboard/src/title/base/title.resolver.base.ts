/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTitleArgs } from "./CreateTitleArgs";
import { UpdateTitleArgs } from "./UpdateTitleArgs";
import { DeleteTitleArgs } from "./DeleteTitleArgs";
import { TitleCountArgs } from "./TitleCountArgs";
import { TitleFindManyArgs } from "./TitleFindManyArgs";
import { TitleFindUniqueArgs } from "./TitleFindUniqueArgs";
import { Title } from "./Title";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { TitleService } from "../title.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Title)
export class TitleResolverBase {
  constructor(
    protected readonly service: TitleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "any",
  })
  async _titlesMeta(
    @graphql.Args() args: TitleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Title])
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "any",
  })
  async titles(@graphql.Args() args: TitleFindManyArgs): Promise<Title[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Title, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "own",
  })
  async title(
    @graphql.Args() args: TitleFindUniqueArgs
  ): Promise<Title | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Title)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "create",
    possession: "any",
  })
  async createTitle(@graphql.Args() args: CreateTitleArgs): Promise<Title> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Title)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "update",
    possession: "any",
  })
  async updateTitle(
    @graphql.Args() args: UpdateTitleArgs
  ): Promise<Title | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Title)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "delete",
    possession: "any",
  })
  async deleteTitle(
    @graphql.Args() args: DeleteTitleArgs
  ): Promise<Title | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Order], { name: "orders" })
  @nestAccessControl.UseRoles({
    resource: "Order",
    action: "read",
    possession: "any",
  })
  async resolveFieldOrders(
    @graphql.Parent() parent: Title,
    @graphql.Args() args: OrderFindManyArgs
  ): Promise<Order[]> {
    const results = await this.service.findOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
